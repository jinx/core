require 'singleton'
require 'jinx/helpers/lazy_hash'

module Jinx
  # A utility class to generate value qualifiers.
  class Uniquifier
    include Singleton

    # Returns a relatively unique integral qualifier. Successive calls to this method
    # within the same time zone spaced more than a millisecond apart return different
    # integers. Each generated qualifier is greater than the previous by an unspecified
    # amount.
    def self.qualifier
      # the first date that this method could be called
      @first ||= Date.new(2011, 12, 01)
      # days as integer + milliseconds as fraction since the first date
      diff = DateTime.now - @first
      # shift a tenth of a milli up into the integer portion
      decimillis = diff * 24 * 60 * 60 * 10000
      # truncate the fraction
      decimillis.truncate
    end

    def initialize
      @cache = Jinx::LazyHash.new { Hash.new }
    end

    # @param obj the object containing the value
    # @param value the value to make unique
    # @return the new unique value, or nil if the given value is nil
    def uniquify(obj, value)
      @cache[obj.class][value] ||= value.uniquify if value
    end

    def clear
      @cache.clear
    end
  end
end

class String
  # Returns a relatively unique value obtained from the specified base value.
  # The suffix is generated by {Jinx::Uniquifier.qualifier}. Spaces are removed.
  #
  # @example
  #   'Test Name'.uniquify #=> Test_Name_330938800614
  def uniquify
    gsub(' ', '_') + "_#{Jinx::Uniquifier.qualifier}"
  end
end
